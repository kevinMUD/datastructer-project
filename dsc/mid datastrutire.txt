Theory

1. Asymptomatic notation types and explain

2. Advantages and Disadvantages of linked list

3. Difference between backtracking and recursion

4. Define pop push top operations




Practical

1. a) Recursion check if it is prime

b) Reverse order of what user entered 

2) Create singly linked list to remove duplicate  
Des

3) 2 largest numbers in stack of given number
==========================================
[4:30 PM, 4/25/2022] Joseph C: Gutanga Output baguhaye program

2-Difference btn malloc() and Calloc()

3-Difference between stack underflow and stack overflow

4-Iki sindi kukibuka neza



Practical:

1-Singly linked list... To reverse entered numbers

2-Stack to display two smallest numbers among the entered numbers.
[4:32 PM, 4/25/2022] Joseph C: https://www.geeksforgeeks.org/recursion/
[4:32 PM, 4/25/2022] Joseph C: https://www.geeksforgeeks.org/data-structures/linked-list/singly-linked-list/
[4:32 PM, 4/25/2022] Joseph C: https://www.geeksforgeeks.org/doubly-linked-list/
[4:32 PM, 4/25/2022] Joseph C: https://www.geeksforgeeks.org/circular-array/
[4:32 PM, 4/25/2022] Joseph C: https://www.geeksforgeeks.org/stack-data-structure/
[4:32 PM, 4/25/2022] Joseph C: Wowweee, niyo wakandika ikibazo ukongeraho geeksforgeeks bahita babikuzanira tuuu
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Rec

1. Print first 50 natural numbers using recursion. 

#include<stdio.h>
int  numPrint(int);
int main()
{
    int n = 1;
	printf("\n\n Recursion : print first 50 natural numbers :\n");
	printf("-------------------------------------------------\n"); 
	printf(" The natural numbers are :");
    numPrint(n);
    printf("\n\n");
    return 0;
}
int numPrint(int n)
{
    if(n<=50)
    {
         printf(" %d ",n);
         numPrint(n+1);
    }
}


2.	 To calculate the sum of numbers from 1 to n using recursion.  

#include<stdio.h>
 
int sumOfRange(int);
 
int main() 
{
   int n1;
   int sum;
	printf("\n\n Recursion : calculate the sum of numbers from 1 to n :\n");
	printf("-----------------------------------------------------------\n");    
 
   printf(" Input the last number of the range starting from 1 : ");
   scanf("%d", &n1);
 
   sum = sumOfRange(n1); 
   printf("\n The sum of numbers from 1 to %d : %d\n\n", n1, sum);
 
   return (0);
}
 
int sumOfRange(int n1) 
{
   int res;
   if (n1 == 1) 
   {
      return (1);
   } else 
   {
      res = n1 + sumOfRange(n1 - 1); //calling the function sumOfRange itself
   }
   return (res);
}


3. Fibonacci


#include<stdio.h>
 
int term;
int fibonacci(int prNo, int num);
 
void main() 
{
   static int prNo = 0, num = 1;
	printf("\n\n Recursion : Print Fibonacci Series :\n");
	printf("-----------------------------------------\n");   
 
   printf(" Input number of terms for the Series (< 20) : ");
   scanf("%d", &term);
 printf(" The Series are :\n"); 
   printf(" 1  ");
   fibonacci(prNo, num);
    printf("\n\n");
}
 
int fibonacci(int prNo, int num) 
{
   static int i = 1;
   int nxtNo;
 
   if (i == term)
      return (0);
   else 
   {
      nxtNo = prNo + num;
      prNo = num;
      num = nxtNo;
      printf("%d  ", nxtNo);
 
      i++;
      fibonacci(prNo, num); //recursion, calling the function fibonacci itself
   }
   return (0);
}


4. To print array elements using recursion  

#include <stdio.h>
#define MAX 100

void ArrayElement(int arr1[], int st, int l);
 
int main()
{
    int arr1[MAX];
    int n, i;
	printf("\n\n Recursion : Print the array elements :\n");
	printf("-------------------------------------------\n");
	
	printf(" Input the number of elements to be stored in the array :");
    scanf("%d",&n);
   
    printf(" Input %d elements in the array :\n",n);
    for(i=0;i<n;i++)
        {
	      printf(" element - %d : ",i);
	      scanf("%d",&arr1[i]);
	    }
     
    printf(" The elements in the array are : ");
    ArrayElement(arr1, 0, n);//call the function ArrayElement
    printf("\n\n"); 
    return 0;
}

void ArrayElement(int arr1[], int st, int l)
{
    if(st >= l)
        return;
         
    //Prints the current array element
    printf("%d  ", arr1[st]);
     
    /* Recursively call ArrayElement to print next element in the array */
    ArrayElement(arr1, st+1, l);//calling the function  ArrayElement itself
}

5: Count the digits of a given number using recursion. 

#include<stdio.h>

int noOfDigits(int n1);
int main()
{
  int n1,ctr;
    printf("\n\n count the digits of a given number :\n");
	printf("-----------------------------------------\n");
    printf(" Input  a number : ");
    scanf("%d",&n1);

    ctr = noOfDigits(n1);

    printf(" The number of digits in the number is :  %d \n\n",ctr);
    return 0;
}

int noOfDigits(int n1)
{
    static int ctr=0;

     if(n1!=0)
     {
          ctr++;
         noOfDigits(n1/10);
    }

    return ctr;
} 

6: 	To find the sum of digits of a number using recursion. 


#include <stdio.h>
 
int DigitSum(int num);
 
int main()
{
    int n1, sum;
	printf("\n\n Recursion : Find the sum of digits of a number :\n");
	printf("-----------------------------------------------------\n");     
    printf(" Input any number to find sum of digits: ");
    scanf("%d", &n1);
     
    sum = DigitSum(n1);//call the function for calculation
     
    printf(" The Sum of digits of %d = %d\n\n", n1, sum);
     
    return 0;
}

int DigitSum(int n1)
{
    if(n1 == 0)
        return 0;
         
    return ((n1 % 10) + DigitSum(n1 / 10));//calling the function DigitSum itself
}



7 . To find GCD of two numbers using recursion.  
 #include <stdio.h>
 
int DigitSum(int num);
 
int main()
{
    int n1, sum;
	printf("\n\n Recursion : Find the sum of digits of a number :\n");
	printf("-----------------------------------------------------\n");     
    printf(" Input any number to find sum of digits: ");
    scanf("%d", &n1);
     
    sum = DigitSum(n1);//call the function for calculation
     
    printf(" The Sum of digits of %d = %d\n\n", n1, sum);
     
    return 0;
}

int DigitSum(int n1)
{
    if(n1 == 0)
        return 0;
         
    return ((n1 % 10) + DigitSum(n1 / 10));//calling the function DigitSum itself
}


8. Get the largest element of an array using recursion 


#include<stdio.h>
#define MAX 100

int MaxElem(int []);
int n;

int main()
{
    int arr1[MAX],hstno,i;
	printf("\n\n Recursion : Get the largest element of an array :\n");
	printf("------------------------------------------------------\n");

      printf(" Input the number of elements to be stored in the array :");
       scanf("%d",&n);
   
       printf(" Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
        {
	      printf(" element - %d : ",i);
	      scanf("%d",&arr1[i]);
	    }	
    hstno=MaxElem(arr1);//call the function MaxElem to return the largest element
    printf(" Largest element of the array is: %d\n\n",hstno);
    return 0;
}
int MaxElem(int arr1[])
{
    static int i=0,hstno =-9999;
    if(i < n)
    {
         if(hstno<arr1[i])
           hstno=arr1[i];
      i++;
      MaxElem(arr1);//calling the function MaxElem itself to compare with further element
    }
    return hstno;
}

9.  	C to reverse a string using recursion.  

#include<stdio.h>
#define MAX 100
char* ReverseOfString(char[]);

int main()
{

    char str1[MAX],*revstr;
	printf("\n\n Recursion : Get reverse of a string :\n");
	printf("------------------------------------------\n");	

    printf(" Input any string: ");
    scanf("%s",str1);

    revstr = ReverseOfString(str1);//call the function ReverseOfString

    printf(" The reversed string is: %s\n\n",revstr);
    return 0;
}
char* ReverseOfString(char str1[])
{
    static int i=0;
    static char revstr[MAX];
    if(*str1)
    {
         ReverseOfString(str1+1);//calling the function ReverseOfString itself
         revstr[i++] = *str1;
    }
    return revstr;
}


10. To find the factorial of a number using recursion

#include<stdio.h>
int findFactorial(int);

int main()
{
  int n1,f;
	printf("\n\n Recursion : Find the Factorial of a number :\n");
	printf("-------------------------------------------------\n");	  
  printf(" Input  a number : ");
  scanf("%d",&n1);
  f=findFactorial(n1);//call the function findFactorial for factorial
  printf(" The Factorial of %d is : %d\n\n",n1,f);
  return 0;
}

int findFactorial(int n)
{
   if(n==1)
       return 1;
   else
       return(n*findFactorial(n-1));// calling the function findFactorial to itself recursively
 }


11. To convert a decimal number to binary using recursion. 

#include<stdio.h>

long convertBinary(int);

int main()
{
    long biNo;
    int decNo;
	
	printf("\n\n Recursion : Convert decimal number to binary :\n");
	printf("---------------------------------------------------\n");

    printf(" Input any decimal number : ");
    scanf("%d",&decNo);

    biNo = convertBinary(decNo);//call the function convertBinary
    printf(" The Binary value of decimal no. %d is : %ld\n\n",decNo,biNo);
    return 0;
}
long convertBinary(int decNo)
{
    static long biNo,r,fctor = 1;

    if(decNo != 0)
    {
         r = decNo % 2;
         biNo = biNo + r * fctor;
         fctor = fctor * 10;
         convertBinary(decNo / 2);//calling the function convertBinary itself recursively
    }
    return biNo;
}






12. To check if a number is a prime number

#include

int checkForPrime(int);
int i;

int main()
{

    int n1,primeNo;

	printf("\n\n Recursion : Check a number is prime number or not :\n");
	printf("--------------------------------------------------------\n");
	
    printf(" Input any positive number : ");
    scanf("%d",&n1);
    
    i = n1/2;

    primeNo = checkForPrime(n1);//call the function checkForPrime

   if(primeNo==1)
        printf(" The number %d is a prime number. \n\n",n1);
   else
      printf(" The number %d is not a prime number. \nn",n1);
   return 0;
}

int checkForPrime(int n1)
{
    if(i==1)
    {
        return 1;
    }
    else if(n1 %i==0)
    {
         return 0;
    }     
    else
       {
         i = i -1; 
         checkForPrime(n1);//calling the function checkForPrime itself recursively
      }
}




13. C to input two numbers and find the LCM of those two numbers using recursion. 



#include <stdio.h>
int lcmCalculate(int a, int b);
 
int main()
{
    int n1, n2, lcmOf;
	printf("\n\n Recursion : Find the LCM of two numbers :\n");
	printf("----------------------------------------------\n");
    printf(" Input 1st number for LCM : ");
    scanf("%d", &n1);
    printf(" Input 2nd number for LCM : ");
    scanf("%d", &n2);
// Ensures that first parameter of lcm must be smaller than 2nd
    if(n1 >  n2)
        lcmOf = lcmCalculate(n2, n1);//call the function lcmCalculate for lcm calculation
    else
        lcmOf = lcmCalculate(n1, n2);//call the function lcmCalculate for lcm calculation
    printf(" The LCM of %d and %d :  %d\n\n", n1, n2, lcmOf);
    return 0;
}
int lcmCalculate(int a, int b)//the value of n1 and n2 is passing through a and b
{
    static int m = 0;
    //Increments m by adding max value to it
    m += b;
//  If found a common multiple then return the m.
    if((m % a == 0) && (m % b == 0))
    {
        return m;
    }
    else
    {
        lcmCalculate(a, b);//calling the function lcmCalculate itself
    }
}


14. C to print even or odd numbers in given range using recursion. 



#include <stdio.h>
void EvenAndOdd(int stVal, int n);
 
int main()
{
    int n;
	printf("\n\n Recursion : Print even or odd numbers in a given range :\n");
	printf("-------------------------------------------------------------\n");	
     
    printf(" Input the range to print starting from 1 : ");
    scanf("%d", &n);
     
    printf("\n All even numbers from 1 to %d are : ", n);
    EvenAndOdd(2, n);//call the function EvenAndOdd for even numbers 
     
    printf("\n\n All odd numbers from 1 to %d are : ", n);
    EvenAndOdd(1, n);// call the function EvenAndOdd for odd numbers
    printf("\n\n");
     
    return 0;
}
void EvenAndOdd(int stVal, int n)
{
    if(stVal > n)
        return;
    printf("%d  ", stVal);
    EvenAndOdd(stVal+2, n);//calling the function EvenAndOdd itself recursively
}


14

i) Output : 18

ii) Output : 4

iii)  Output : 3

iv) Output : Error

v) m=2, n=0
m=3, n=-1
m=3, n=-2
m=3, n=-3

vi) Output : 2, 3

vii) Output : 9

viii) 0       1       2       0       3       0       1


ix) Output : 100

x) 199














































Links :



https://www.w3resource.com/c-programming-exercises/recursion/index.php ibisubizo biriho kuri Recursion


Doubly linked list : https://youtu.be/JdQeNxWCguQ
